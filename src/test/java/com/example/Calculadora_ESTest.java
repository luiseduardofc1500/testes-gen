/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 05:27:47 GMT 2024
 */

package com.example;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.Calculadora;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculadora_ESTest extends Calculadora_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.porcentagem(2833, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.subtrair(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.subtrair(2578, 0);
      assertEquals(2578, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.somar(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.somar((-2089), (-2089));
      assertEquals((-4178), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.raizQuadrada(0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.potencia((-659), 1528);
      assertEquals((-7.49607711E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.porcentagem(0, (-1));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.porcentagem(1771, (-3127));
      assertEquals((-5537917.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.multiplicar(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.multiplicar((-2363), (-2363));
      assertEquals(5583769, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.dividir(2578, 1);
      assertEquals(2578, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.dividir((-2689), 481);
      assertEquals((-5), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.porcentagem((-659), (-659));
      assertEquals(434281.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.porcentagem(5067, 5067);
      assertEquals(2.5674489E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.potencia((-29), 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      // Undeclared exception!
      try { 
        calculadora0.potencia(1168, (-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N\u00E3o \u00E9 poss\u00EDvel calcular para n\u00FAmeros negativos.
         //
         verifyException("com.example.Calculadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      calculadora0.potencia(0, 5067);
      // Undeclared exception!
      calculadora0.potencia((-1979), 5067);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      // Undeclared exception!
      try { 
        calculadora0.raizQuadrada((-2498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // N\u00E3o \u00E9 poss\u00EDvel calcular a raiz quadrada de um n\u00FAmero negativo.
         //
         verifyException("com.example.Calculadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      double double0 = calculadora0.raizQuadrada(1634);
      assertEquals(40.422765862815474, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      // Undeclared exception!
      try { 
        calculadora0.dividir((-927), 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Divis\u00E3o por zero n\u00E3o permitida.
         //
         verifyException("com.example.Calculadora", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.dividir((-29), (-659));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.somar(817, 817);
      assertEquals(1634, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.subtrair((-659), (-29));
      assertEquals((-630), int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Calculadora calculadora0 = new Calculadora();
      int int0 = calculadora0.multiplicar(1528, (-659));
      assertEquals((-1006952), int0);
  }
}
